/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __HELLOWORLD_H__
#define __HELLOWORLD_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.example.test */

#define EXAMPLE_TYPE_TEST (example_test_get_type ())
#define EXAMPLE_TEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAMPLE_TYPE_TEST, ExampleTest))
#define EXAMPLE_IS_TEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAMPLE_TYPE_TEST))
#define EXAMPLE_TEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), EXAMPLE_TYPE_TEST, ExampleTestIface))

struct _ExampleTest;
typedef struct _ExampleTest ExampleTest;
typedef struct _ExampleTestIface ExampleTestIface;

struct _ExampleTestIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_hello_world) (
    ExampleTest *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_greeting);

};

GType example_test_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *example_test_interface_info (void);
guint example_test_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void example_test_complete_hello_world (
    ExampleTest *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus method calls: */
void example_test_call_hello_world (
    ExampleTest *proxy,
    const gchar *arg_greeting,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean example_test_call_hello_world_finish (
    ExampleTest *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean example_test_call_hello_world_sync (
    ExampleTest *proxy,
    const gchar *arg_greeting,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define EXAMPLE_TYPE_TEST_PROXY (example_test_proxy_get_type ())
#define EXAMPLE_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAMPLE_TYPE_TEST_PROXY, ExampleTestProxy))
#define EXAMPLE_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAMPLE_TYPE_TEST_PROXY, ExampleTestProxyClass))
#define EXAMPLE_TEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAMPLE_TYPE_TEST_PROXY, ExampleTestProxyClass))
#define EXAMPLE_IS_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAMPLE_TYPE_TEST_PROXY))
#define EXAMPLE_IS_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAMPLE_TYPE_TEST_PROXY))

typedef struct _ExampleTestProxy ExampleTestProxy;
typedef struct _ExampleTestProxyClass ExampleTestProxyClass;
typedef struct _ExampleTestProxyPrivate ExampleTestProxyPrivate;

struct _ExampleTestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ExampleTestProxyPrivate *priv;
};

struct _ExampleTestProxyClass
{
  GDBusProxyClass parent_class;
};

GType example_test_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ExampleTestProxy, g_object_unref)
#endif

void example_test_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ExampleTest *example_test_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ExampleTest *example_test_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void example_test_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ExampleTest *example_test_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ExampleTest *example_test_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define EXAMPLE_TYPE_TEST_SKELETON (example_test_skeleton_get_type ())
#define EXAMPLE_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), EXAMPLE_TYPE_TEST_SKELETON, ExampleTestSkeleton))
#define EXAMPLE_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), EXAMPLE_TYPE_TEST_SKELETON, ExampleTestSkeletonClass))
#define EXAMPLE_TEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), EXAMPLE_TYPE_TEST_SKELETON, ExampleTestSkeletonClass))
#define EXAMPLE_IS_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), EXAMPLE_TYPE_TEST_SKELETON))
#define EXAMPLE_IS_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), EXAMPLE_TYPE_TEST_SKELETON))

typedef struct _ExampleTestSkeleton ExampleTestSkeleton;
typedef struct _ExampleTestSkeletonClass ExampleTestSkeletonClass;
typedef struct _ExampleTestSkeletonPrivate ExampleTestSkeletonPrivate;

struct _ExampleTestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ExampleTestSkeletonPrivate *priv;
};

struct _ExampleTestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType example_test_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ExampleTestSkeleton, g_object_unref)
#endif

ExampleTest *example_test_skeleton_new (void);


G_END_DECLS

#endif /* __HELLOWORLD_H__ */
